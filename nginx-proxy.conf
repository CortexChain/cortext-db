user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

# Stream module for PostgreSQL TCP load balancing
stream {
    # Logging for PostgreSQL connections
    log_format pg_proxy '$remote_addr - [$time_local] $protocol '
                       'upstream: $upstream_addr '
                       'bytes_sent: $bytes_sent bytes_received: $bytes_received '
                       'session_time: $session_time '
                       'upstream_connect_time: $upstream_connect_time';

    access_log /var/log/nginx/postgres.log pg_proxy;

    # Health check and upstream configuration
    upstream postgres_write {
        server postgres-master:5432 max_fails=3 fail_timeout=30s weight=1;
    }

    upstream postgres_read {
        server postgres-slave:5432 max_fails=3 fail_timeout=30s weight=1;
        # server postgres-slave2:5432 max_fails=3 fail_timeout=30s weight=1;
    }

    # PostgreSQL Master (Write operations)
    server {
        listen 5434;
        proxy_pass postgres_write;
        proxy_timeout 60s;
        proxy_connect_timeout 10s;
        proxy_responses 1;
        
        # Preserve client connection info
        proxy_bind $remote_addr transparent;
    }

    # PostgreSQL Slave (Read operations)  
    server {
        listen 5435;
        proxy_pass postgres_read;
        proxy_timeout 60s;
        proxy_connect_timeout 10s;
        proxy_responses 1;
        
        # Preserve client connection info
        proxy_bind $remote_addr transparent;
    }
}

# HTTP module for monitoring and stats
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Monitoring and stats server
    server {
        listen 8080;
        server_name localhost;

        # Main info page
        location / {
            return 200 "Nginx PostgreSQL Proxy\n========================\n\nEndpoints:\n- Write (Master): localhost:5434\n- Read (Slave):   localhost:5435\n- Stats:          localhost:8080/status\n- Health:         localhost:8080/health\n\nDatabase: contextdb\nUser: admin\n";
            add_header Content-Type text/plain;
        }

        # Nginx status page
        location /status {
            stub_status on;
            access_log off;
            allow all;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Basic metrics
        location /metrics {
            access_log off;
            return 200 "# Nginx PostgreSQL Proxy Metrics\n# Master: postgres-master:5432\n# Slave: postgres-slave:5432\n";
            add_header Content-Type text/plain;
        }
    }
}